import asyncio
import os
from datetime import datetime

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType

import settings
from db.queries import (
    save_payment_info,
    get_current_rates,
    get_rate,
    decrease_devices_left,
    increase_certificate_number,
)
from . import messages
from .utils import get_kb, parse_message, get_config_file, remove_expired_certificates

bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher(bot)
rate_data = {}  # –£–±—Ä–∞—Ç—å

scheduler = AsyncIOScheduler()


async def search_expired_certificates():
    """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤."""
    remove_expired_certificates()


def start_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞."""
    # scheduler.add_job(search_expired_certificates, 'interval', hours=2)
    scheduler.add_job(search_expired_certificates, 'date', run_date=datetime(2023, 7, 9, 14, 3, 5))
    scheduler.start()
    executor.start_polling(dp, skip_updates=False)


@dp.message_handler(lambda message: message["text"] in ["/start", "‚óÄÔ∏è–ù–∞–∑–∞–¥"])
async def bot_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã."""
    kb = get_kb(settings.in_chat_commands)
    await message.answer(messages.START_MESSAGE, reply_markup=kb)


@dp.message_handler(regexp="‚è≥ –ú–æ–∏ —Ç–∞—Ä–∏—Ñ—ã")
async def bot_rate(message: types.Message):
    """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."""
    rates = get_current_rates(message["from"]["id"])
    if rates:
        buttons = {}
        for rate in rates:
            msg = f"üîõ –¢–∞—Ä–∏—Ñ: {rate.rate_name} // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {rate.devices_left} // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {rate.end_date} // –ù–æ–º–µ—Ä=={rate.id}"
            buttons[msg] = None
        kb = get_kb(buttons, 1)
        kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥"))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=kb)
    else:
        await message.answer(messages.NO_RATE_MESSAGE, parse_mode="HTML")


@dp.message_handler(regexp="üîõ –¢–∞—Ä–∏—Ñ.*")
async def bot_current_rate(message: types.Message):
    try:
        id_ = int(message.text.split("==")[-1])
        choosen_rate = get_rate(id_)
        if choosen_rate.end_date < datetime.now():
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å =(", parse_mode="HTML")
        elif choosen_rate.devices_left == 0:
            await message.answer(
                "–ü–æ —ç—Ç–æ–º—É —Ç–∞—Ä–∏—Ñ—É –≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
            )
        else:
            await message.answer(messages.OPEN_VPN_MESSAGE, parse_mode="HTML")
            file_name = get_config_file(
                username=message["from"]["username"],
                user_id=message["from"]["id"],
                current_cert_count=choosen_rate.user.certificate_number,
                payment_info_id=choosen_rate.id
            )
            decrease_devices_left(id_)
            increase_certificate_number(message["from"]["id"])
            file_path = os.path.join(settings.CERTIFICATE_VOLUME, file_name)
            await message.answer_document(document=open(file_path, "rb"))
    except Exception:  # –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.", parse_mode="HTML")


@dp.message_handler(regexp="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def bot_support(message: types.Message):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."""
    await message.answer(messages.SUPPORT_MESSAGE, parse_mode="HTML")


@dp.message_handler(regexp="ü§î FAQ")
async def bot_faq(message: types.Message):
    """–í—ã–≤–æ–¥ FAQ."""
    for msg in messages.FAQ_MESSAGES:
        await message.answer(msg, parse_mode="HTML")


@dp.message_handler(regexp="üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def bot_info(message: types.Message):
    """–í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    for msg, pic_path in messages.INFO_MESSAGES_MAPPER.items():
        if pic_path is not None:
            with open(os.path.join(settings.INFO_DIR, pic_path), "rb") as file:
                await message.answer_photo(
                    photo=file, caption=msg, parse_mode="HTML"
                )
        else:
            await message.answer(msg, parse_mode="HTML")


@dp.message_handler(lambda message: message["text"] in ["üíµ –¢–∞—Ä–∏—Ñ—ã", "üîô –ù–∞–∑–∞–¥"])
async def bot_rates(message: types.Message):
    """–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã."""
    kb = get_kb(settings.rates_commands)
    kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥"))
    await message.answer(
        messages.RATES_START_MESSAGE, reply_markup=kb, parse_mode="HTML"
    )


@dp.message_handler(regexp="–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –≤—Ä—É—á–Ω—É—é üá¨üáßüá´üáÆüá©üá™üá∑üá∫üá∫üá∏")
async def bot_manual_rate(message: types.Message):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞."""
    kb = get_kb(settings.manual_rates_commands)
    kb.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    await message.answer(
        "–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç—Ä–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–∞—Ä–∏—Ñ.", reply_markup=kb, parse_mode="HTML"
    )


@dp.message_handler(lambda message: message["text"] in settings.pay_commands)
async def buy(message: types.Message):
    """–í—ã–≤–æ–¥ –æ–∫–Ω–∞ —Å –æ–ø–ª–∞—Ç–æ–π."""
    # TODO —É–±—Ä–∞—Ç—å –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
    if settings.PAYMENTS_TOKEN.split(":")[1] == "TEST":
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    current_rate = settings.RATES[message["text"]]
    rate_data[message["from"]["id"]] = current_rate

    await bot.send_invoice(
        message.chat.id,
        title="–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –í–ü–ù",
        description=(
            f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –í–ü–ù –Ω–∞ {current_rate['duration']}"
            f" {current_rate['measurement']}"
        ),
        provider_token=settings.PAYMENTS_TOKEN,
        currency=f"{current_rate['currency']}",
        photo_url=settings.PHOTO_URL,
        photo_width=416,
        photo_height=234,
        photo_size=416,
        is_flexible=False,
        prices=[
            types.LabeledPrice(
                label="–í–ü–ù –Ω–∞ {current_rate['duration']} –º–µ—Å—è—Ü(-–µ–≤)",
                amount=current_rate["price"],
            )
        ],
        start_parameter="one-month-subscription",
        payload="test-invoice-payload",
    )


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π."""
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Outline –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
    data = parse_message(message, rate_data[message["from"]["id"]])
    save_payment_info(data)
    await bot.send_message(
        message.chat.id,
        (
            f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}"
            f" {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!"
        ),
    )
    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:")
    await bot.send_message(
        message.chat.id,
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>–ú–æ–∏ —Ç–∞—Ä–∏—Ñ—ã</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º",
        parse_mode="HTML",
    )
    del rate_data[message["from"]["id"]]

import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType

import settings
from db.queries import save_payment_info, get_current_rate
from . import messages
from .utils import get_menu, parse_message, get_outline_vpn_url

bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher(bot)
rate_data = {}  # –£–±—Ä–∞—Ç—å


def start_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞."""
    executor.start_polling(dp, skip_updates=False)


@dp.message_handler(lambda message: message["text"] in ["/start", "‚óÄÔ∏è–ù–∞–∑–∞–¥"])
async def bot_start(message: types.Message):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã."""
    menu = get_menu(types.InlineKeyboardButton, settings.in_chat_commands)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for elem in menu:
        kb.add(*elem)
    await message.answer(messages.start_message, reply_markup=kb)


@dp.message_handler(regexp="‚è≥ –ú–æ–π —Ç–∞—Ä–∏—Ñ")
async def bot_rate(message: types.Message):
    """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."""
    # TODO –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ "–º–æ–π —Ç–∞—Ä–∏—Ñ"
    rates = get_current_rate(message["from"]["id"])
    if rates:
        for rate in rates:
            await message.answer(rate, parse_mode="HTML")
    else:
        await message.answer(messages.no_rate_message, parse_mode="HTML")


@dp.message_handler(regexp="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def bot_support(message: types.Message):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ."""
    await message.answer(messages.support_message, parse_mode="HTML")


@dp.message_handler(regexp="ü§î FAQ")
async def bot_faq(message: types.Message):
    """–í—ã–≤–æ–¥ FAQ."""
    for msg in messages.faq_message:
        await message.answer(msg, parse_mode="HTML")


@dp.message_handler(regexp="üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def bot_info(message: types.Message):
    """–í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    for msg, pic_path in messages.info_messages_mapper.items():
        if pic_path is not None:
            with open(os.path.join(settings.INFO_DIR, pic_path), "rb") as file:
                await message.answer_photo(
                    photo=file, caption=msg, parse_mode="HTML"
                )
        else:
            await message.answer(msg, parse_mode="HTML")


# @dp.callback_query_handler(lambda call: call.data=="rates")
@dp.message_handler(lambda message: message["text"] in ["üíµ –¢–∞—Ä–∏—Ñ—ã", "üîô –ù–∞–∑–∞–¥"])
async def bot_rates(message: types.Message):
    """–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã."""
    menu = get_menu(types.InlineKeyboardButton, settings.rates_commands)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for elem in menu:
        kb.add(*elem)
    kb.add(types.InlineKeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥"))
    await message.answer(
        messages.rates_start_message, reply_markup=kb, parse_mode="HTML"
    )


@dp.message_handler(regexp="–í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É –≤—Ä—É—á–Ω—É—é üá¨üáßüá´üáÆüá©üá™üá∑üá∫üá∫üá∏")
async def bot_manual_rate(message: types.Message):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞."""
    menu = get_menu(types.InlineKeyboardButton, settings.manual_rates_commands)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for elem in menu:
        kb.add(*elem)
    kb.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    await message.answer(
        "–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç—Ä–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–∞—Ä–∏—Ñ.", reply_markup=kb, parse_mode="HTML"
    )


@dp.message_handler(lambda message: message["text"] in settings.pay_commands)
async def buy(message: types.Message):
    """–í—ã–≤–æ–¥ –æ–∫–Ω–∞ —Å –æ–ø–ª–∞—Ç–æ–π."""
    # TODO —É–±—Ä–∞—Ç—å –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
    if settings.PAYMENTS_TOKEN.split(":")[1] == "TEST":
        await bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!!!")

    rate_data[message["from"]["id"]] = settings.RATES[message["text"]]

    # TODO –≤—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ –ø–æ–ª—è
    await bot.send_invoice(
        message.chat.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞",
        description="–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        provider_token=settings.PAYMENTS_TOKEN,
        currency="rub",
        photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
        photo_width=416,
        photo_height=234,
        photo_size=416,
        is_flexible=False,
        prices=settings.PRICES,
        start_parameter="one-month-subscription",
        payload="test-invoice-payload",
    )


@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π."""
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ Outline –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
    data = parse_message(message)
    save_payment_info(data)
    url = get_outline_vpn_url()
    await bot.send_message(
        message.chat.id,
        (
            f"–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}"
            f" {message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!!!"
        ),
    )
    await bot.send_message(message.chat.id, "–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ Outline VPN:")
    await bot.send_message(message.chat.id, url)
